<!DOCTYPE html>
<html>
<head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link
      rel="stylesheet"
      as="style"
      onload="this.rel='stylesheet'"
      href="https://fonts.googleapis.com/css2?display=swap&amp;family=Inter%3Awght%40400%3B500%3B700%3B900&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900"
    />
    <title><%= title %></title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />
    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
    <script src="https://js.hcaptcha.com/1/api.js?onload=onHCaptchaLoaded&render=explicit" async defer></script>
    <script src="/appwrite-auth.js"></script>
    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
    <script src="/discord-auth.js"></script>
</head>
<body>
    <div class="relative flex size-full min-h-screen flex-col bg-[#f9f8fc] group/design-root overflow-x-hidden" style='font-family: Inter, "Noto Sans", sans-serif;'>
        <div class="layout-container flex h-full grow flex-col">
            <!-- Header -->
            <header class="flex items-center justify-between whitespace-nowrap border-b border-solid border-b-[#eae7f3] px-10 py-3">
                <div class="flex items-center gap-4 text-[#110e1b]">
                    <h2 class="text-[#110e1b] text-lg font-bold leading-tight tracking-[-0.015em]">my-cool.space</h2>
                </div>
                <div class="flex flex-1 justify-end gap-8">
                    <div class="flex items-center gap-9"></div>
                    <div class="flex gap-2">
                        <a href="/" 
                           class="flex max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 bg-[#eae7f3] text-[#110e1b] gap-2 text-sm font-bold leading-normal tracking-[0.015em] min-w-0 px-2.5">
                            <span class="truncate">Home</span>
                        </a>
                        <a href="/account-settings" 
                           class="flex max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 bg-[#eae7f3] text-[#110e1b] gap-2 text-sm font-bold leading-normal tracking-[0.015em] min-w-0 px-2.5">
                            <span class="truncate">Account Settings</span>
                        </a>
                        <a href="/report-abuse" 
                           class="flex max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 bg-[#eae7f3] text-[#110e1b] gap-2 text-sm font-bold leading-normal tracking-[0.015em] min-w-0 px-2.5">
                            <span class="truncate">Report Abuse</span>
                        </a>
                        <button
                            onclick="logoutDiscord()"
                            class="flex max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 bg-[#eae7f3] text-[#110e1b] gap-2 text-sm font-bold leading-normal tracking-[0.015em] min-w-0 px-2.5"
                        >
                            <span class="truncate">Logout</span>
                        </button>
                        <div class="text-sm text-[#604e97] flex items-center">
                            Hello, <span class="font-medium text-[#110e1b]"><%= user.username %>!</span>
                        </div>
                    </div>
                </div>
            </header>

            <!-- Main Content -->
            <div class="px-10 flex flex-1 justify-center py-5">
                <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
                    <div class="flex flex-wrap justify-between gap-3 p-4">
                        <div class="flex min-w-72 flex-col gap-3">
                            <p class="text-[#110e1b] tracking-light text-[32px] font-bold leading-tight">Dashboard</p>
                            <p class="text-[#604e97] text-sm font-normal leading-normal">Welcome back, <%= user.username %>! Manage your subdomains here.</p>
                        </div>
                    </div>

                    <!-- New Subdomain Request Form -->
                    <div class="flex flex-col gap-3 p-4">
                        <h2 class="text-[#110e1b] text-[22px] font-bold leading-tight tracking-[-0.015em]">Request a New Subdomain</h2>
                        
                        <!-- Subdomain Limit Info -->
                        <div id="subdomainLimitInfo" class="rounded-lg border border-[#d6d0e7] bg-yellow-50 p-4">
                            <div class="flex items-start gap-3">
                                <div class="text-yellow-600" data-icon="Info" data-size="20px" data-weight="regular">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" fill="currentColor" viewBox="0 0 256 256">
                                        <path d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Zm12-88a12,12,0,0,1-24,0V80a12,12,0,0,1,24,0Zm-12,56a16,16,0,1,1,16-16A16,16,0,0,1,128,184Z"></path>
                                    </svg>
                                </div>
                                <div class="flex-1">
                                    <h3 class="text-sm font-medium text-yellow-800 mb-1">ðŸ“‹ Subdomain Allocation</h3>
                                    <p class="text-sm text-yellow-700">
                                        Each account is allocated <strong><span id="maxSubdomainsText">loading...</span> subdomain<span id="subdomainPluralText">s</span></strong>. You can check your current allocation in the "My Requests" section below.
                                    </p>
                                </div>
                            </div>
                        </div>
                        <div class="rounded-lg border border-[#d6d0e7] bg-[#f9f8fc] p-6">
                            <form id="subdomainForm" class="flex flex-col gap-4">
                                <div class="flex flex-col gap-2">
                                    <label for="subdomain" class="text-[#110e1b] text-sm font-medium leading-normal">
                                        Subdomain Name
                                    </label>
                                    <div class="flex">
                                        <input 
                                            type="text" 
                                            id="subdomain" 
                                            name="subdomain" 
                                            placeholder="yourname" 
                                            required 
                                            pattern="[a-z0-9\-]+"
                                            title="Only lowercase letters, numbers, and hyphens allowed"
                                            class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-l-lg text-[#110e1b] focus:outline-0 focus:ring-0 border border-[#d6d0e7] bg-white focus:border-[#4c19e5] h-10 placeholder:text-[#604e97] p-3 text-sm font-normal leading-normal"
                                        />
                                        <div class="flex items-center justify-center rounded-r-lg border border-l-0 border-[#d6d0e7] bg-[#eae7f3] px-3">
                                            <span class="text-[#604e97] text-sm font-normal">.my-cool.space</span>
                                        </div>
                                    </div>
                                    <p class="text-[#604e97] text-xs font-normal leading-normal">
                                        Only lowercase letters, numbers, and hyphens. No spaces or special characters.
                                    </p>
                                </div>
                                
                                <div class="flex flex-col gap-2">
                                    <label for="targetUrl" class="text-[#110e1b] text-sm font-medium leading-normal">
                                        Target Domain/IP
                                    </label>
                                    <input 
                                        type="text" 
                                        id="targetUrl" 
                                        name="targetUrl" 
                                        placeholder="example.com or 192.168.1.1" 
                                        required 
                                        class="form-input flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-lg text-[#110e1b] focus:outline-0 focus:ring-0 border border-[#d6d0e7] bg-white focus:border-[#4c19e5] h-10 placeholder:text-[#604e97] p-3 text-sm font-normal leading-normal"
                                    />
                                    <p class="text-[#604e97] text-xs font-normal leading-normal">
                                        Enter a domain name for CNAME records or an IP address for A records
                                    </p>
                                </div>
                                
                                <div class="flex flex-col gap-2">
                                    <label for="recordType" class="text-[#110e1b] text-sm font-medium leading-normal">
                                        Record Type
                                    </label>
                                    <select 
                                        id="recordType" 
                                        name="recordType"
                                        class="form-select flex w-full min-w-0 flex-1 resize-none overflow-hidden rounded-lg text-[#110e1b] focus:outline-0 focus:ring-0 border border-[#d6d0e7] bg-white focus:border-[#4c19e5] h-10 p-3 text-sm font-normal leading-normal"
                                    >
                                        <option value="cname">CNAME - Points subdomain to another domain</option>
                                        <option value="a">A Record - Points to an IP address</option>
                                    </select>
                                    <p id="recordTypeHelp" class="text-[#604e97] text-xs font-normal leading-normal">
                                        CNAME points your subdomain to another domain name.
                                    </p>
                                </div>

                                <div class="rounded-lg border border-[#d6d0e7] bg-blue-50 p-4">
                                    <h3 class="text-sm font-medium text-blue-800 mb-2">ðŸ“‹ What happens next?</h3>
                                    <ul class="text-sm text-blue-700 space-y-1">
                                        <li>â€¢ Your request will be reviewed by our admin team</li>
                                        <li>â€¢ Once approved, DNS records will be created automatically</li>
                                        <li>â€¢ You'll be able to access your site at <code id="previewUrl" class="bg-blue-100 px-1 rounded">subdomain.my-cool.space</code></li>
                                        <li>â€¢ DNS propagation usually takes 5-15 minutes</li>
                                    </ul>
                                </div>
                                
                                <!-- hCaptcha -->
                                <div class="flex flex-col gap-2">
                                    <label class="text-[#110e1b] text-sm font-medium leading-normal">
                                        Security Verification *
                                    </label>
                                    <div id="hcaptcha-container"></div>
                                    <p class="text-[#604e97] text-xs font-normal leading-normal">
                                        Please complete the security verification to prevent automated abuse.
                                    </p>
                                </div>
                                
                                <button 
                                    type="submit"
                                    class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#4c19e5] text-[#f9f8fc] text-sm font-bold leading-normal tracking-[0.015em] hover:bg-[#3a15b8] transition-colors"
                                >
                                    <span class="truncate">Request Subdomain</span>
                                </button>
                            </form>

                            <div id="loading" class="hidden text-center py-8">
                                <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-[#4c19e5]"></div>
                                <p class="mt-2 text-[#604e97]">Submitting your request...</p>
                            </div>

                            <div id="success" class="hidden bg-green-50 border border-green-200 rounded-md p-4 mt-6">
                                <div class="flex">
                                    <div class="flex-shrink-0">
                                        <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-sm font-medium text-green-800">Request submitted successfully!</h3>
                                        <p class="text-sm text-green-700 mt-1">Your subdomain request is now pending admin approval.</p>
                                    </div>
                                </div>
                            </div>

                            <div id="error" class="hidden bg-red-50 border border-red-200 rounded-md p-4 mt-6">
                                <div class="flex">
                                    <div class="flex-shrink-0">
                                        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                                        </svg>
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-sm font-medium text-red-800">Error submitting request</h3>
                                        <p id="errorMessage" class="text-sm text-red-700 mt-1"></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Your Subdomain Requests -->
                    <div class="flex flex-col gap-3 p-4">
                        <h2 class="text-[#110e1b] text-[22px] font-bold leading-tight tracking-[-0.015em]">My Subdomain Requests</h2>
                        <div id="myRequests">
                            <div class="flex flex-col items-center justify-center rounded-lg border border-[#d6d0e7] bg-[#f9f8fc] p-8">
                                <div class="text-[#604e97] mb-4" data-icon="ArrowPath" data-size="48px" data-weight="regular">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="48px" height="48px" fill="currentColor" viewBox="0 0 256 256" class="animate-spin">
                                        <path d="M197.67,186.37a8,8,0,0,1,0,11.29C196.58,198.73,170.82,224,128,224c-37.39,0-64.53-22.4-80-39.85V208a8,8,0,0,1-16,0V160a8,8,0,0,1,8-8H88a8,8,0,0,1,0,16H55.44C67.76,183.35,93,208,128,208c36.72,0,58.4-21.31,58.37-21.34A8,8,0,0,1,197.67,186.37ZM216,40a8,8,0,0,0-8,8V71.85C192.53,54.4,165.39,32,128,32,85.18,32,59.42,57.27,58.33,58.34a8,8,0,0,0,11.34,11.32C69.6,69.69,91.28,48,128,48c35,0,60.24,24.65,72.56,40H168a8,8,0,0,0,0,16h48a8,8,0,0,0,8-8V48A8,8,0,0,0,216,40Z"></path>
                                    </svg>
                                </div>
                                <p class="text-[#604e97] text-base font-normal leading-normal text-center">
                                    Loading your requests...
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let maxSubdomains = 1; // Default, will be updated from server
        let hcaptchaWidgetId = null;
        const HCAPTCHA_SITE_KEY = '<%= hcaptchaSiteKey %>';
        
        // Callback for when hCaptcha is loaded
        window.onHCaptchaLoaded = function() {
            console.log('hCaptcha API loaded successfully');
            console.log('Site key:', HCAPTCHA_SITE_KEY);
            
            // Render hCaptcha widget
            try {
                hcaptchaWidgetId = hcaptcha.render('hcaptcha-container', {
                    sitekey: HCAPTCHA_SITE_KEY,
                    size: 'normal',
                    theme: 'light'
                });
                console.log('hCaptcha widget rendered with ID:', hcaptchaWidgetId);
            } catch (error) {
                console.error('Error rendering hCaptcha:', error);
            }
        };
        
        // Debug: Check if hCaptcha loaded
        document.addEventListener('DOMContentLoaded', () => {
            console.log('Dashboard loaded for user');
            console.log('hCaptcha available:', typeof hcaptcha !== 'undefined');
            console.log('hCaptcha site key:', HCAPTCHA_SITE_KEY);
            
            // Check if hCaptcha container is present
            const hcaptchaContainer = document.getElementById('hcaptcha-container');
            console.log('hCaptcha container found:', !!hcaptchaContainer);
            
            // Load admin settings first, then set up dashboard
            loadAdminSettings().then(() => {
                setupDashboard();
            });
        });

        // Load admin settings to get the current subdomain limit
        async function loadAdminSettings() {
            try {
                const response = await fetch('/api/status', {
                    credentials: 'include'
                });
                const data = await response.json();
                
                if (data.adminSettings) {
                    maxSubdomains = data.adminSettings.maxSubdomains || 1;
                    console.log('ðŸ“Š Max subdomains loaded:', maxSubdomains);
                    
                    // Update the limit display
                    updateSubdomainLimitDisplay();
                }
            } catch (error) {
                console.error('Error loading admin settings:', error);
                // Use default value if loading fails
            }
        }

        // Update the subdomain limit display based on server settings
        function updateSubdomainLimitDisplay() {
            const maxSubdomainsText = document.getElementById('maxSubdomainsText');
            const subdomainPluralText = document.getElementById('subdomainPluralText');
            
            if (maxSubdomainsText) {
                maxSubdomainsText.textContent = maxSubdomains + (maxSubdomains === 1 ? ' free' : '');
            }
            
            if (subdomainPluralText) {
                subdomainPluralText.textContent = maxSubdomains === 1 ? '' : 's';
            }
        }

        function setupDashboard() {
            console.log('Setting up dashboard...');
            
            // Update preview URL as user types
            document.getElementById('subdomain').addEventListener('input', function(e) {
                const subdomain = e.target.value;
                const preview = document.getElementById('previewUrl');
                if (subdomain) {
                    preview.textContent = subdomain + '.my-cool.space';
                } else {
                    preview.textContent = 'subdomain.my-cool.space';
                }
            });

            // Handle record type changes
            document.getElementById('recordType').addEventListener('change', function() {
                const recordType = this.value;
                const targetUrlInput = document.getElementById('targetUrl');
                const targetUrlLabel = document.querySelector('label[for="targetUrl"]');
                const helpText = document.getElementById('recordTypeHelp');
                
                switch(recordType) {
                    case 'cname':
                        targetUrlLabel.textContent = 'Target Domain';
                        targetUrlInput.type = 'text';
                        targetUrlInput.placeholder = 'example.com';
                        helpText.textContent = 'CNAME points your subdomain to another domain name.';
                        break;
                    case 'a':
                        targetUrlLabel.textContent = 'IP Address';
                        targetUrlInput.type = 'text';
                        targetUrlInput.placeholder = '192.168.1.1';
                        helpText.textContent = 'A record points your subdomain to an IP address.';
                        break;
                }
            });

            // Handle form submission
            document.getElementById('subdomainForm').addEventListener('submit', async function(e) {
                console.log('Form submission started');
                e.preventDefault();
                
                const form = e.target;
                const formData = new FormData(form);
                const data = Object.fromEntries(formData);
                
                // Get hCaptcha response
                let hcaptchaResponse = null;
                if (hcaptchaWidgetId !== null && typeof hcaptcha !== 'undefined') {
                    try {
                        hcaptchaResponse = hcaptcha.getResponse(hcaptchaWidgetId);
                    } catch (error) {
                        console.error('Error getting hCaptcha response:', error);
                    }
                }
                
                if (!hcaptchaResponse) {
                    document.getElementById('errorMessage').textContent = 'Please complete the security verification.';
                    document.getElementById('error').classList.remove('hidden');
                    return;
                }
                data['h-captcha-response'] = hcaptchaResponse;
                
                console.log('Form data:', data);
                
                // Show loading
                document.getElementById('loading').classList.remove('hidden');
                form.classList.add('hidden');
                document.getElementById('success').classList.add('hidden');
                document.getElementById('error').classList.add('hidden');
                
                try {
                    const response = await makeAuthenticatedRequest('/api/request-subdomain', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
                    
                    const result = await response.json();
                    
                    if (response.ok) {
                        document.getElementById('success').classList.remove('hidden');
                        form.reset();
                        if (hcaptchaWidgetId !== null && typeof hcaptcha !== 'undefined') {
                            hcaptcha.reset(hcaptchaWidgetId); // Reset hCaptcha
                        }
                        loadMyRequests(); // Refresh the requests list
                    } else {
                        throw new Error(result.error || 'Unknown error');
                    }
                } catch (error) {
                    console.error('Form submission error:', error);
                    
                    // Handle specific error types
                    let errorMessage = error.message;
                    if (error.message === 'SUBDOMAIN_LIMIT_REACHED') {
                        errorMessage = `You have reached the maximum number of subdomains allowed for your account (${maxSubdomains} subdomain${maxSubdomains > 1 ? 's' : ''}). ${maxSubdomains === 1 ? 'If you need additional subdomains, please contact support.' : ''}`;
                    }
                    
                    document.getElementById('errorMessage').textContent = errorMessage;
                    document.getElementById('error').classList.remove('hidden');
                } finally {
                    document.getElementById('loading').classList.add('hidden');
                    form.classList.remove('hidden');
                    if (hcaptchaWidgetId !== null && typeof hcaptcha !== 'undefined') {
                        hcaptcha.reset(hcaptchaWidgetId); // Reset hCaptcha on error
                    }
                }
            });

            // Load user's requests
            loadMyRequests();
        }

        // Load user's requests
        async function loadMyRequests() {
            console.log('Loading user requests...');
            try {
                const response = await makeAuthenticatedRequest('/api/my-requests');
                const data = await response.json();
                
                const container = document.getElementById('myRequests');
                
                if (data.requests && data.requests.length > 0) {
                    // Count active subdomains (approved or pending)
                    const activeSubdomains = data.requests.filter(request => 
                        request.status === 'approved' || request.status === 'pending'
                    ).length;
                    
                    // Update the limit notification to show current usage
                    const limitInfo = document.querySelector('#subdomainLimitInfo');
                    if (limitInfo) {
                        const limitText = limitInfo.querySelector('p');
                        if (limitText) {
                            if (activeSubdomains >= maxSubdomains) {
                                limitText.innerHTML = `
                                    You have used <strong>${activeSubdomains}/${maxSubdomains}</strong> of your subdomain allocation. 
                                    <span class="text-red-700 font-medium">You cannot request additional subdomains at this time.</span>
                                `;
                                limitInfo.className = 'rounded-lg border border-red-200 bg-red-50 p-4';
                                limitInfo.querySelector('h3').textContent = 'ðŸš« Subdomain Limit Reached';
                                
                                // Disable the form
                                const form = document.getElementById('subdomainForm');
                                const inputs = form.querySelectorAll('input, select, button');
                                inputs.forEach(input => input.disabled = true);
                                form.style.opacity = '0.6';
                                form.style.pointerEvents = 'none';
                            } else {
                                const remaining = maxSubdomains - activeSubdomains;
                                limitText.innerHTML = `
                                    You have used <strong>${activeSubdomains}/${maxSubdomains}</strong> of your subdomain allocation. 
                                    You can request <strong>${remaining} more subdomain${remaining > 1 ? 's' : ''}</strong>.
                                `;
                            }
                        }
                    }
                    container.innerHTML = data.requests.map(request => {
                        // Extract record type and clean target URL for display
                        let recordType = 'cname'; // Default to CNAME instead of redirect
                        let displayUrl = request.target_url;
                        
                        if (request.target_url && request.target_url.startsWith('[') && request.target_url.includes(']')) {
                            const match = request.target_url.match(/^\[([^\]]+)\](.+)$/);
                            if (match) {
                                recordType = match[1];
                                displayUrl = match[2];
                            }
                        }
                        
                        return `
                        <div class="flex items-center gap-4 rounded-lg border border-[#d6d0e7] bg-white p-4 mb-3">
                            <div class="flex flex-1 flex-col gap-1">
                                <p class="text-[#110e1b] text-base font-bold leading-tight">
                                    ${request.subdomain}.my-cool.space
                                </p>
                                <p class="text-[#604e97] text-sm font-normal leading-normal">
                                    Target: ${displayUrl}
                                </p>
                                <p class="text-[#604e97] text-xs font-normal leading-normal">
                                    Type: <span class="font-medium">${recordType.toUpperCase()}</span> | Requested: ${new Date(request.created_at).toLocaleDateString()}
                                </p>
                            </div>
                            <div class="shrink-0">
                                ${request.status === 'approved' ? `
                                    <div class="flex items-center gap-2 rounded-full bg-green-100 px-3 py-1">
                                        <div class="text-green-600" data-icon="CheckCircle" data-size="16px" data-weight="regular">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" fill="currentColor" viewBox="0 0 256 256">
                                                <path d="M173.66,98.34a8,8,0,0,1,0,11.32l-56,56a8,8,0,0,1-11.32,0l-24-24a8,8,0,0,1,11.32-11.32L112,148.69l50.34-50.35A8,8,0,0,1,173.66,98.34ZM232,128A104,104,0,1,1,128,24,104.11,104.11,0,0,1,232,128Zm-16,0a88,88,0,1,0-88,88A88.1,88.1,0,0,0,216,128Z"></path>
                                            </svg>
                                        </div>
                                        <span class="text-green-600 text-sm font-medium">Approved</span>
                                    </div>
                                ` : request.status === 'denied' ? `
                                    <div class="flex items-center gap-2 rounded-full bg-red-100 px-3 py-1">
                                        <div class="text-red-600" data-icon="XCircle" data-size="16px" data-weight="regular">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" fill="currentColor" viewBox="0 0 256 256">
                                                <path d="M165.66,101.66,139.31,128l26.35,26.34a8,8,0,0,1-11.32,11.32L128,139.31l-26.34,26.35a8,8,0,0,1-11.32-11.32L116.69,128,90.34,101.66a8,8,0,0,1,11.32-11.32L128,116.69l26.34-26.35a8,8,0,0,1,11.32,11.32ZM232,128A104,104,0,1,1,128,24,104.11,104.11,0,0,1,232,128Zm-16,0a88,88,0,1,0-88,88A88.1,88.1,0,0,0,216,128Z"></path>
                                            </svg>
                                        </div>
                                        <span class="text-red-600 text-sm font-medium">Denied</span>
                                    </div>
                                ` : `
                                    <div class="flex items-center gap-2 rounded-full bg-yellow-100 px-3 py-1">
                                        <div class="text-yellow-600" data-icon="Clock" data-size="16px" data-weight="regular">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16px" height="16px" fill="currentColor" viewBox="0 0 256 256">
                                                <path d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24Zm0,192a88,88,0,1,1,88-88A88.1,88.1,0,0,1,128,216Zm64-88a8,8,0,0,1-8,8H128a8,8,0,0,1-8-8V72a8,8,0,0,1,16,0v48h48A8,8,0,0,1,192,128Z"></path>
                                            </svg>
                                        </div>
                                        <span class="text-yellow-600 text-sm font-medium">Pending</span>
                                    </div>
                                `}
                            </div>
                        </div>
                        `;
                    }).join('');
                } else {
                    container.innerHTML = `
                        <div class="flex flex-col items-center justify-center rounded-lg border border-[#d6d0e7] bg-[#f9f8fc] p-8">
                            <div class="text-[#604e97] mb-4" data-icon="Globe" data-size="48px" data-weight="regular">
                                <svg xmlns="http://www.w3.org/2000/svg" width="48px" height="48px" fill="currentColor" viewBox="0 0 256 256">
                                    <path d="M128,24A104,104,0,1,0,232,128,104.11,104.11,0,0,0,128,24ZM101.63,168h52.74C149.94,179.65,139.36,188,128,188S106.06,179.65,101.63,168Zm-3.15-16C98.22,144.83,98.22,135.17,98.48,128H157.52c.26,7.17.26,16.83,0,24ZM40,128c0-7.7.88-15.16,2.48-22.33C47.15,103.84,62.77,104,88.82,104H89.52c-.26,7.17-.26,16.83,0,24H88.82c-26.05,0-41.67.16-46.34-1.67C40.88,143.16,40,135.7,40,128Zm114.37-40H101.63C106.06,76.35,116.64,68,128,68S149.94,76.35,154.37,88Zm3.15,16c.26,7.17.26,16.83,0,24h58.7c26.05,0,41.67-.16,46.34,1.67C216,135.7,216,143.16,216,128s0-7.7-.44-15.33c-4.67-1.83-20.29-1.67-46.34-1.67Z"></path>
                                </svg>
                            </div>
                            <p class="text-[#604e97] text-base font-normal leading-normal text-center">
                                No subdomain requests yet. Create your first one above!
                            </p>
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading requests:', error);
                document.getElementById('myRequests').innerHTML = `
                    <div class="flex flex-col items-center justify-center rounded-lg border border-[#d6d0e7] bg-red-50 p-8">
                        <div class="text-red-600 mb-4" data-icon="XCircle" data-size="48px" data-weight="regular">
                            <svg xmlns="http://www.w3.org/2000/svg" width="48px" height="48px" fill="currentColor" viewBox="0 0 256 256">
                                <path d="M165.66,101.66,139.31,128l26.35,26.34a8,8,0,0,1-11.32,11.32L128,139.31l-26.34,26.35a8,8,0,0,1-11.32-11.32L116.69,128,90.34,101.66a8,8,0,0,1,11.32-11.32L128,116.69l26.34-26.35a8,8,0,0,1,11.32,11.32ZM232,128A104,104,0,1,1,128,24,104.11,104.11,0,0,1,232,128Zm-16,0a88,88,0,1,0-88,88A88.1,88.1,0,0,0,216,128Z"></path>
                            </svg>
                        </div>
                        <p class="text-red-600 text-base font-normal leading-normal text-center">
                            Error loading requests.
                        </p>
                    </div>
                `;
            }
        }

        // Debug function to check session
        window.checkSession = async function() {
            try {
                const response = await fetch('/api/session-check', {
                    credentials: 'include'
                });
                const data = await response.json();
                console.log('Session check result:', data);
                alert('Session check: ' + JSON.stringify(data, null, 2));
            } catch (error) {
                console.error('Session check failed:', error);
                alert('Session check failed: ' + error.message);
            }
        };
    </script>
</body>
</html>
